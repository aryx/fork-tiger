#!/usr/bin/perl

use strict;

use Getopt::Long;
use Pod::Usage;

######################################################################
# Prelude
######################################################################

# yes I know about autoconf ... and autoconf sucks.

# assumes standard: binutils, gcc, as, ld, gnu toolchain
# assumes standard: make, sh, perl (for this script)

my $project = 
    "tigerc";
my $projectcmdline = 
    "./tigerc demos/hello.tig > demos/hello.c--";

######################################################################
# Options
######################################################################

my $prefix="/usr/local";

my $man = 0;
my $help = 0;

# see http://perldoc.perl.org/Getopt/Long.html
# coupling: if add options here, add an explanation at the bottom of this file
# too. Later may also add something in the documentation latex file (or use
# literate programming for that too)
GetOptions (
    "prefix=s" => \$prefix,

    'help|?' => \$help, 
    'man' => \$man
    ) or pod2usage(2);
    #or die "$0: GetOptions: $!";

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $src="$prefix/share/$project";

# dependencies

######################################################################
# Side effects
######################################################################

######################################################################
# Helpers
######################################################################
BEGIN { die "need Perl 5 or greater" if $] < 5 ; }

#use Common;
sub pr2 { print STDERR "@_\n" }
sub cat { 
    my ($what) = @_;
    my @list;
    open(TMP, $what);
    while(<TMP>) { push @list, "$_"; }
    \@list;
}
sub notb   { !$_[0] }
sub mapf   { my ($f, $xs) = @_; [ map { &$f($_) } @{$xs} ] }
sub plural { my ($e) = @_; if ($e > 1) { "s" } else { "" } }

sub check_config { my ($command, $expect, $msggood, $msgbad) = @_;
    my $error = 0;
		   
    my $full = cat($command);
    my $res = join(" ", @{$full});
#	       pr2 $res;
    if(notb($res =~ $expect)) { $error++; pr2 "!!!! $msgbad !!!!"; }
    else { pr2 $msggood }
    return $error;
}
######################################################################
# Let's go
######################################################################

pr2 "Checking your configuration.\n";

my $error = 0;
my $error2 = 0;

#---------------------------------------------------------------------
# Compilers and runtimes
#---------------------------------------------------------------------
$error += 
    check_config("echo \"1;;\\n\" | ocaml |",
                 "Objective(.*) 3.*",
                 "OCaml (the wonderful language) is present.",
                 "The program ocaml is missing or is not a good version. We need at least 3.09",
                 );

#---------------------------------------------------------------
# Developers tools
#---------------------------------------------------------------

pr2 "";

$error += check_config(
  "make -v 2>&1 |grep Make|",
  "GNU Make 3\.[0-9]+", #version 3.81
  "make (gnu version) is present.",
  "The program gnu make is missing or is not a good version.
We need  3.XX",
);


#---------------------------------------------------------------------
# More developers tools
#---------------------------------------------------------------------

#TODO qc-- binary in include file

#---------------------------------------------------------------------
# Librairies
#---------------------------------------------------------------------
my $arch = `uname`;

######################################################################
# Generate config files (platform/portability issues)
######################################################################

######################################################################
# Generate globals files (features issues)
######################################################################

######################################################################
# Diagnostic 
######################################################################

if($error2) { 
    pr2 "
----------------------------------------------------------------------
!!!! You can try to compile and test $project, 
but some features or plugins may be missing. !!!!\n
We have found $error2 missing package" . plural($error2) . ". " . 
(($error2 > 1) ? "Some of those packages" : "This package") . 
" may be installed 
by picking " . ($error2 > 1 ? "them" : "it") . 
" in $project-dependencies.tgz available on the $project website.
"; 
} else {
    pr2 "
All seems fine for $project.
"
    ;
}


if($error) { 
    pr2 "
----------------------------------------------------------------------
!!!! There seems to have problem, we have found $error missing package" . 
plural($error) . ".
" . (($error > 1) ? "Some of those packages" : "This package") . 
    " may be installed by picking " . ($error > 1 ? "them" : "it") . 
    " in $project-dependencies.tgz available
on the $project website. !!!!
----------------------------------------------------------------------
";
} else { 

    pr2 "
----------------------------------------------------------------------
To compile $project type:
  \$ make depend
  \$ make

Then, to test $project simply type:
  \$ $projectcmdline

----------------------------------------------------------------------
";

}


######################################################################
# Generating the configuration
######################################################################

pr2 "$project target prefix: $prefix (you can use --prefix to override it)";
pr2 "Generating Makefile.config";
pr2 " (see also --help)";
open(CONFIG, ">Makefile.config");
print CONFIG "# autogenerated by configure

# Where to install the binary
BINDIR=$prefix/bin

# Where to install the man pages
MANDIR=$prefix/man

# Where to install the lib
LIBDIR=$prefix/lib

# Where to install the configuration files
SHAREDIR=$src

QCINCLUDE=/usr/local/bin/../include/qc--
QC=qc--

# Features
";


# The OPTBIN variable is here to allow to use ocamlc.opt instead of
# ocaml, when it is available, which speeds up compilation. So
# if you want the fast version of the ocaml chain tools, set this var
# or setenv it to \".opt\" in your startup script.
#OPTBIN=$opt

######################################################################
# Documentation
######################################################################

__END__

=head1 NAME

configure - setting compilation options for tiger

=head1 SYNOPSIS

configure [options] [--prefix=/path/to/install]

Options are:
--prefix

=head1 OPTIONS

=over 8






=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read command line options and generate
a B<Makefile.config> and other files to set the compilation
environment for tiger.

=cut
